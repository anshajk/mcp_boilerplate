name: E-Commerce API Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api_mcp/**'
      - '.github/workflows/api-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api_mcp/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd api_mcp
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run code formatting check
      run: |
        cd api_mcp
        pip install black
        # Check if code is formatted with Black
        black --check --diff  .

    - name: Run tests with pytest
      run: |
        cd api_mcp
        python -m pytest test_app.py -v --tb=short --cov=app --cov-report=xml --cov-report=term

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./api_mcp/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Test Summary
      if: always()
      run: |
        cd api_mcp
        echo "## Test Results :rocket:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Python Version: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        python -m pytest test_app.py --tb=no -q >> $GITHUB_STEP_SUMMARY 2>&1 || true

  format-and-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Check code formatting with Black
      run: |
        cd api_mcp
        black --check --diff  .

    - name: Check import sorting with isort
      run: |
        cd api_mcp
        isort --check-only --diff  .

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        cd api_mcp
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: Check dependencies for vulnerabilities
      run: |
        cd api_mcp
        pip install -r requirements.txt
        safety check --json || true
